# functional tests

import nose.tools
import urllib, urllib2, sys
endpointURL = "http://mmisw.org/sparql"
query = """SELECT DISTINCT ?s ?p ?o WHERE { ?s ?p ?o.} LIMIT 20"""

# tests of the MMI ORR SPARQL endpoint
def test_endpoint_is_okay():
    request = urllib2.Request(endpointURL) 
    f = urllib2.urlopen(request)
    nose.tools.assert_equal(f.msg, 'OK')

def test_endpoint_simple_query_works():
    params = {
        "query": query,
        }
    queryURL = urllib.urlencode(params)
    requestURL = endpointURL + '?' + queryURL
    request = urllib2.Request(requestURL) 
    # default return format is XML
    f = urllib2.urlopen(request)
    result = urllib2.urlopen(request).read()
    # form of this xml --
    # '<?xml version="1.0"?>\n<!-- Generated by AllegroGraph 4.11 -->\n
    #  <sparql xmlns="http://www.w3.org/2005/sparql-results#">\n
    #   <head>\n
    #      <variable name="s"/>\n
    #      <variable name="p"/>\n
    #      <variable name="o"/>\n
    #   </head>\n
    #   <results>\n
    #      lots of stuff here
    #   </results>\n
    #  </sparql>'
    # ##### assert expected string in result xml

def test_endpoint_with_ill_formed_url():
    params = {
        "query": query,
        }
    queryURL = urllib.urlencode(params)
    # purposefully make a bad request by leaving off '?'
    requestURL = endpointURL + '' + queryURL
    request = urllib2.Request(requestURL)
    try:
        f = urllib2.urlopen(request)
    except urllib2.URLError, e:
        print >> sys.stderr, str(e.code)+': '+e.reason 
    nose.tools.assert_raises(urllib2.URLError)

